vector08 = rep(1:4, 2)
vector09 = rep(1:4, each = 2)
dataframe01 = data.frame(vector08, vector09, vector10 = vector09 - vector08)
View(dataframe01)
dataframe01[1,]
dataframe01[,2:3]
dataframe01[4,3]
matrix01 = matrix(1:10, nrow = 5)
matrix02 = matrix(1:10, ncol = 5)
View(matrix01)
View(matrix02)
matrix01 %*% matrix02
list01 = list(vector01, dataframe01, matrix01)
vector01 = c(1,2,3)
list01 = list(vector01, dataframe01, matrix01)
list01[[2]]
list01[[3]][4,2]
View(list01)
help(setwd)
exit
quit
quit
q()
shiny::runApp('DePauw/Summer2019/KineticGames')
runApp()
runApp('DePauw/Summer2019/KineticGames')
runApp('DePauw/Summer2019/KineticGames')
shiny::runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
substrates = c(0.01, 0.02, 0.04, 0.08, 0.16, 0.60, 2.0)
df = data.frame("substrates" = substrates)
file = lambertMM(file = df)
View(file)
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
t_sec = 60 * t_min
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
file = lambertMM(file = df)
View(file)
View(file)
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
View(file)
t_sec = seq(0, 300, length.out = 40)
file2 = lambertMM2(df)
View(file2)
file2[["t_sec"]]
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
substrates = c(0.02, 0.04, 0.08, 0.2, 0.8, 2.0, 4.0, 8.0, 10.0)
df = data.frame("substrates" = substrates)
file2 = lambertMM2(df)
View(file2)
seq(0, 20, length.out = 40)
seq(o, 300, length.out = 40)
seq(0, 300, length.out = 40)
pt_error = rep(list(character(length(t_sec))), length(file$substrates))
pt_error[[i]] = pinf - kmapp * lambertW({(pinf/kmapp) * exp((pinf - vapp * t_sec)/kmapp)}) + rnorm(t_sec, mean = 0, sd = sd)
e = 0.02
k1 = 1000
k_1 = 950
k2 = 50
km = (k_1 + k2)/k1
v_max = k2 * e
kmapp = km
vapp = v_max
pt = rep(list(character(length(t_sec))), length(file$substrates))
pt_error = rep(list(character(length(t_sec))), length(file$substrates))
slopes = as.numeric(character(length(file$substrates)))
slopes_error = as.numeric(character(length(file$substrates)))
intercepts = as.numeric(character(length(file$substrates)))
intercepts_error = as.numeric(character(length(file$substrates)))
if(length(file$substrates != 0)){
for(i in 1:length(file$substrates)){
s = file$substrates[i]
pinf = pinf_ratio * s
pt[[i]] = pinf - kmapp * lambertW({(pinf/kmapp) * exp((pinf - vapp * t_sec)/kmapp)})
pt_error[[i]] = pinf - kmapp * lambertW({(pinf/kmapp) * exp((pinf - vapp * t_sec)/kmapp)}) + rnorm(t_sec, mean = 0, sd = sd)
v_init = lm(pt[[i]][0:3]~t_sec[0:3])
slopes[i] = as.numeric(v_init$coefficient[2])
intercepts[i] = as.numeric(v_init$coefficient[1])
v_init_error = lm(pt_error[[i]][0:3]~t_sec[0:3])
slopes_error[i] = as.numeric(v_init_error$coefficient[2])
intercepts_error[i] = as.numeric(v_init_error$coefficient[1])
}
pt = as.data.frame(matrix(unlist(pt), nrow = length(unlist(pt[1]))))
pt_error = as.data.frame(matrix(unlist(pt_error), nrow = length(unlist(pt_error[1]))))
}
pinf_ratio = 0.9818
time = 20
sd = 0
pt = rep(list(character(length(t_sec))), length(file$substrates))
pt_error = rep(list(character(length(t_sec))), length(file$substrates))
slopes = as.numeric(character(length(file$substrates)))
slopes_error = as.numeric(character(length(file$substrates)))
intercepts = as.numeric(character(length(file$substrates)))
intercepts_error = as.numeric(character(length(file$substrates)))
i = 1
s = file$substrates[i]
pinf = pinf_ratio * s
pt[[i]] = pinf - kmapp * lambertW({(pinf/kmapp) * exp((pinf - vapp * t_sec)/kmapp)})
pt_error[[i]] = pinf - kmapp * lambertW({(pinf/kmapp) * exp((pinf - vapp * t_sec)/kmapp)}) + rnorm(t_sec, mean = 0, sd = sd)
v_init = lm(pt[[i]][0:3]~t_sec[0:3])
slopes[i] = as.numeric(v_init$coefficient[2])
intercepts[i] = as.numeric(v_init$coefficient[1])
v_init_error = lm(pt_error[[i]][0:3]~t_sec[0:3])
slopes_error[i] = as.numeric(v_init_error$coefficient[2])
intercepts_error[i] = as.numeric(v_init_error$coefficient[1])
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM2.R')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM2.R')
game = match.arg(game)
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM2.R')
source('~/DePauw/Summer2019/Enzyme/lambertMM2.R')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM2.R')
runApp('DePauw/Summer2019/Enzyme')
View(file2)
View(file2)
View(file2)
View(file2)
View(file2)
View(file2)
View(file2)
runApp('DePauw/Summer2019/Enzyme')
max(file2$substrates)
View(file2)
runApp('DePauw/Summer2019/Enzyme')
substrates = c()
df = data.frame("substrates" = substrates)
file = lambertMM2(df)
file$substrates
length(file$substrates)
source('~/DePauw/Summer2019/Enzyme/lambertMM2.R')
View(file)
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
output$graph_P = renderPlot({
plot_lambert(file = spectrum(),
display_theoretical_values = input$theory)
})
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp()
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp('DePauw/Summer2019/Enzyme')
list("10nM" = 10 * 10^(-9), "0.02M" = 0.02, "10μM" = 10*10^(-6) )
choice = list("10nM" = 10 * 10^(-9), "0.02M" = 0.02, "10μM" = 10*10^(-6) )
list["10nM"]
choice["10nM"]
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/KineticGames')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
View(choice)
what = 10 * 10^(-8)
if(what == 1 * 10^(-7){})
if(what == 1 * 10^(-7){print(true)})
if(what == 1 * 10^(-7)){print(TRUE)}
choices = list("0.1 M" = 1 * 10^(-1), "0.02 M" = 2 * 10^(-2), "100 μM" = 100 * 10^(-6), "10 μM" = 10 * 10^(-6))
1e-5
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
View(choices)
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp()
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
substrates = character()
values = data.frame("substrates" = substrates)
length(values$substrates)
runApp('DePauw/Summer2019/Enzyme')
runApp()
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp()
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
