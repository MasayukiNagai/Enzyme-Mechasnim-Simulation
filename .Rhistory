df = data.frame("substrates" = substrates, "slopes" = slopes, "intercepts" = intercepts, "pt_error" = pt_error, "pt" = pt)
count = count + 1
e_2 = 100 * 10^(-6)
time = 20
file = lambertPt("s" = input$s_2, "e" = e_2, "time" = time, "k2" = k2, "km" = km, "pinf_ratio" = pinf_ratio, "sd" = sd)
file = lambertPt("s" = 2, "e" = e_2, "time" = time, "k2" = k2, "km" = km, "pinf_ratio" = pinf_ratio, "sd" = sd)
values$df$substrates[count] = 2
df$substrates[count] = 2
df[count, 5 + time_max : 5 + time_max + time]= file$pt
length(file$pt)
5 + time_max + time - 5 + time_max
5 + time_max + time - (5 + time_max)
df[count, 6 + time_max : 6 + time_max + time + 1]= file$pt
6 + time_max + time + 1
6 + time_max
1027 - 1006
df[1, 1006:1027] = file$pt
View(df)
length(file$pt_error)
1027 - 1005
4 + time - 4
4 + time + 1 - 4
df[1, 4:24] = file$pt_error
values$df[count, 4 : 4 + time] = file$pt_error
df[count, 4 : 4 + time] = file$pt_error
df[1, 4:24] = file$pt_error
df[count, 4:4+time] = file$pt_error
df[1, 4:24] = file$pt_error
df[count, 4:4+time] = file$pt_error
df[count, 4:(4+time)] = file$pt_error
df[count, (5 + time_max) : (5 + time_max + time)]= file$pt
df[count, 4 : (4 + time)] = file$pt_error
runApp('DePauw/Summer2019/Enzyme')
color = unlist(lapply(file$slopes/vapp, change_color))
runApp('DePauw/Summer2019/Enzyme')
t = seq(0, time)
length(t)
file[, 4:(4 + time)]
file[1:1, 4:(4+time)]
file[1, 4:(4+time)]
df[, 4:(4+time)]
df[1:count, 4:(4 + time)]
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
1: nrow(df)
runApp('DePauw/Summer2019/Enzyme')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
test = lambertMM()
substrates = c(2, 1, 4)
test = lambertMM(file = substrates)
df = data.frame("substrates" = substrates)
test = lambertMM(file = df)
View(test)
View(test)
test = seq(1,10)
test
t(te)st
t(test)
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
View(file)
df = data.frame("substrates" = substrates, "slopes" = slopes, "intercepts" = intercepts, "pt_error" = pt_error, "pt" = pt)
substrates = rep(NA, 40)
pt = matrix(nrow = 40, ncol = time_max + 1)
pt_error = matrix(nrow = 40, ncol = time_max + 1)
slopes = rep(NA, 40)
intercepts = rep(NA, 40)
count = 0
df = data.frame("substrates" = substrates, "slopes" = slopes, "intercepts" = intercepts, "pt_error" = pt_error, "pt" = pt)
count = count + 1
e_2 = 100 * 10^(-6)
time = input$time_2
time = 20
file = lambertPt("s" = 2, "e" = e_2, "time" = time, "k2" = k2, "km" = km, "pinf_ratio" = pinf_ratio, "sd" = sd)
df$substrates[count] = 2
df[count, (5 + time_max) : (5 + time_max + time)]= file$pt
df[count, 4 : (4 + time)] = file$pt_error
df$slopes[count] = formatC(file$slopes_error, format = "e", digits = 3
)
df$intercepts[count] = file$intercepts_error
View(df)
yval1 = df$intercepts + df$slopes * 0
df$intercepts
as.numeric(df$intercepts[1:count])
yval1 = as.numeric(file$intercepts[1:count]) + as.numeric(file$slopes[1:count]) * 0
yval2 = as.numeric(file$intercepts[1:count]) + as.numeric(file$slopes[1:count]) * time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(as.numeric(file$slopes[1:count])/vapp, change_color))
vapp = 500 * 10^(-6)
color = unlist(lapply(as.numeric(file$slopes[1:count])/vapp, change_color))
xval = matrix(data = c(0, time), ncol = 1)
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
View(xval)
xval = t
matlines(x = t(t), y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
View(yvalues)
xval = matrix(data = c(0, time), ncol = 1)
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp()
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
substrates2 = rep(NA, 20)
pt2 = matrix(nrow = 20, ncol = time_max + 1)
pt_error2 = matrix(nrow = 20, ncol = time_max + 1)
slopes2 = rep(NA, 20)
intercepts2 = rep(NA, 20)
km = 1
k2 = 50
pinf_ratio = 0.9818
sd = 0.03
s_max = 10
time_max = 10000
substrates2 = rep(NA, 20)
pt2 = matrix(nrow = 20, ncol = time_max + 1)
pt_error2 = matrix(nrow = 20, ncol = time_max + 1)
slopes2 = rep(NA, 20)
intercepts2 = rep(NA, 20)
df = data.frame("substrates" = substrates2, "slopes" = slopes2, "intercepts" = intercepts2, "pt_error" = pt_error2, "pt" = pt2
)
count = -0
count = 0
df$substrates[(count + 1)] = 2
file = lambertPt(s = 2, e = a100*10, time = 4000, k2 = k2, km = km, s_max = s_max, pinf_ratio = pinf_ratio, sd = sd)
file = lambertPt(s = 2, e = 100*10^(-6), time = 4000, k2 = k2, km = km, s_max = s_max, pinf_ratio = pinf_ratio, sd = sd)
df[(count + 1), (5 + time_max) : (5 + time_max + time2)]= file$pt
time2 = 4000
time2 = 4000
df[(count + 1), (5 + time_max) : (5 + time_max + time2)]= file$pt
df[(count + 1), 4 : (4 + time2)] = file$pt_error
df$slopes[(count + 1)] = formatC(file$slopes_error, format = "e", digits = 3)
df$intercepts[(count + 1)] = file$intercepts_error
df$slopes = NA
View(df)
df$substrates = NA
df$pt = NA
df$pt_error = NA
df[1,] = NA
df = NA
substrates2 = rep(NA, 20)
pt2 = matrix(nrow = 20, ncol = time_max + 1)
pt_error2 = matrix(nrow = 20, ncol = time_max + 1)
slopes2 = rep(NA, 20)
intercepts2 = rep(NA, 20)
df = data.frame("substrates" = substrates2, "slopes" = slopes2, "intercepts" = intercepts2, "pt_error" = pt_error2, "pt" = pt2)
df[,] = NA
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 3, col = color)
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
s = seq(0, time, steps = 100)
s = seq(0, 10, steps = 100)
s = seq(0, 10, length.out = 100)
runApp('DePauw/Summer2019/Enzyme')
runApp()
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
s = seq(0, 20, length.out = 4000)
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
4 %*% x = 8
solve(4 %*% x = 8)
solve(4, 8)
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
s = seq(0, 20, by = 0.1)
s = seq(0, 10.01, by = 0.1)
s = seq(0, 10.1, by = 0.1)
(10.01 - 0)/0.1 + 1
s = seq(0, 10.01, by = 0.1)
v = 1:10
v[1.2]
v[1.9]
runApp('DePauw/Summer2019/Enzyme')
length2 = formatC((15/interval + 1), format = "d")
length2 = formatC((15/0.1 + 1), format = "d")
m = 1
length2 = as.numeric(formatC((15/0.1 + 1), format = "d"))
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp()
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
#change the values of variables
km = 1
k2 = 50
#the max formation rate of product
pinf_ratio = 0.9818
#degree of deviation
sd = 0.01
#the maximum value of substrates (slider)
s_max = 10
#the number of points you get for each data
interval = 0.1
#substrate concentration for exercise 1 (μM) (from 1 to 10)
s1 = 1
#the max time of exercise 1
time1 = 500
length1 = as.numeric(formatC((time1/interval + 1), format = "d"))
enzymes1 = rep(NA, 10)
pt1 = matrix(nrow = 10, ncol = length1)
pt_error1 = matrix(nrow = 10, ncol = length1)
slopes1 = rep(NA, 10)
intercepts1 = rep(NA, 10)
df = data.frame("enyzmes" = enzymes1, "slopes" = slopes1, "intercepts" = intercepts1, "pt_error" = pt_error1, "pt" = pt1)
df$enzymes
enzymes = (1.0, 2.0, 4.0)
enzymes = [1.0, 3.4, 4.8]
enzymes = c(1.0, 2.0, 3.0, 4.0)
df = data.frame("enyzmes" = enzymes, "slopes" = slopes1, "intercepts" = intercepts1, "pt_error" = pt_error1, "pt" = pt1)
file = lambertPt(s = s1, e = 1.0, time = time1, k2 = k2, km = km, s_max = s_max,  pinf_ratio = pinf_ratio, interval = interval, sd = sd)
values1$df$enzymes[(count + 1)] = s1
values1$df[(count + 1), (4 + length1) : (3 + length1 + length1)]= file$pt
values1$df[(count + 1), 4 : (3 + length1)] = file$pt_error
values1$df$slopes[(count + 1)] = formatC(file$slopes_error, format = "e", digits = 3)
values1$df$intercepts[(count + 1)] = file$intercepts_error
file = lambertPt(s = s1, e = 1.0, time = time1, k2 = k2, km = km, s_max = s_max,  pinf_ratio = pinf_ratio, interval = interval, sd = sd)
df$enzymes[(count + 1)] = s1
df[(count + 1), (4 + length1) : (3 + length1 + length1)]= file$pt
df[(count + 1), 4 : (3 + length1)] = file$pt_error
df$slopes[(count + 1)] = formatC(file$slopes_error, format = "e", digits = 3)
df$intercepts[(count + 1)] = file$intercepts_error
count = 0
file = lambertPt(s = s1, e = 1.0, time = time1, k2 = k2, km = km, s_max = s_max,  pinf_ratio = pinf_ratio, interval = interval, sd = sd)
df$enzymes[(count + 1)] = s1
df[(count + 1), (4 + length1) : (3 + length1 + length1)]= file$pt
df[(count + 1), 4 : (3 + length1)] = file$pt_error
df$slopes[(count + 1)] = formatC(file$slopes_error, format = "e", digits = 3)
df$intercepts[(count + 1)] = file$intercepts_error
View(df)
runApp('DePauw/Summer2019/Enzyme')
color = unlist(lapply(as.numeric(file$slopes[1:count])/vapp, change_color))
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/KineticGames 7_files')
shiny::runApp('DePauw/Summer2019/Enzyme')
e = c(0.1, 0.001, 0.0001, 0.00001)
s = 2 * e
length(e)
df = data.frame("enzyme" = e, "s")
df = data.frame("enzyme" = e, "sub" = s)
#change the values of variables
km = 1
k2 = 50
#the max formation rate of product
pinf_ratio = 0.9818
#degree of deviation
sd = 0.01
#the maximum value of substrates (slider)
s_max = 10
#the number of points you get for each data
interval = 0.1
#substrate concentration for exercise 1 (μM) (from 1 to 10)
s1 = 1
#the max time of exercise 1
time1 = 500
t = seq(0, time, by = interval)
t = seq(0, time1, by = interval)
st = e * t
st = e[1] * t
runApp('DePauw/Summer2019/Enzyme')
shinyApp(
ui = dashboardPage(header, sidebar, body),
server = function(input, output) {
output$test <- rpivotTable::renderRpivotTable({
rpivotTable(x,
rows = "power_level",
cols = "cst",
aggregatorName = "Count",
rendererName = "Stacked Bar Chart")
})
}
)
rpivotTable(x,
rows = "cst",
vals = "power_level",
aggregatorName = "Average",
rendererName = "Bar Chart")
install.packages(c("rpivotTable", "shinydashboard"))
library(shiny); runApp('Downloads/sang.R')
shiny::runApp('DePauw/Summer2019/Enzyme')
t = 1:10
c1 = 2t
c1 = 2 *t
c2 = 3*t
c3 = 4 *t
c = c1 + c2
c = c(c1, c2)
m1 = matrix(c(c1, c2, c3), nrow = 3)
View(m1)
s = 0.19847394394
s1 = s
s2 = 2 * s
s3 = 3 * s
m2 = matrix(c(s1, s2, s3), nrow = 3)
m3 = formatC(m2, format = "e", digits = 2)
View(m3)
m2
enzymes1 = c(0.1, 0.01, 0.001, 0.0001)
file_1 = lambertPt(s = s1, e = enzymes[1], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_2 = lambertPt(s = s1, e = enzymes[2], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_3 = lambertPt(s = s1, e = enzymes[3], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_4 = lambertPt(s = s1, e = enzymes[4], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
# pt1 = matrix(c(file_1$pt, file_2$pt, file_3$pt, file_4$pt), nrow = 4)
# pt_error1 = matrix(c(file_1$pt_error, file_2$pt_error, file_3$pt_error, file_4$pt_error), nrow = 4)
# slopes1 = formatC(c(file_1$slopes_error, file_2$slopes_error, file_3$slopes_error, file_4$slopes_Error), format = "e", digits = 3)
# intercepts1 = c(file_1$intercepts_error, file_2$intercepts_error, file_3$intercepts_error, file_4$intercepts_error)
df = data.frame("enzymes" = enzymes1, "slopes" = slopes1, "intercepts" = intercepts1)
# df_pt = data.frame("pt_1" = file_1$pt, "pt_2" = file_2$pt, "pt_3" = file_3$pt, "pt_4" = file_4$pt)
df_pt_error = data.frame("pt_error_1" = file_1$pt_error, "pt_error_2" = file_2$pt_error, "pt_error_3" = file_3$pt_error, "pt_error_4" = file_4$pt_error)
enzymes1 = c(0.1, 0.01, 0.001, 0.0001)
file_1 = lambertPt(s = s1, e = enzymes1[1], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_2 = lambertPt(s = s1, e = enzymes1[2], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_3 = lambertPt(s = s1, e = enzymes1[3], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_4 = lambertPt(s = s1, e = enzymes1[4], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
# pt1 = matrix(c(file_1$pt, file_2$pt, file_3$pt, file_4$pt), nrow = 4)
# pt_error1 = matrix(c(file_1$pt_error, file_2$pt_error, file_3$pt_error, file_4$pt_error), nrow = 4)
# slopes1 = formatC(c(file_1$slopes_error, file_2$slopes_error, file_3$slopes_error, file_4$slopes_Error), format = "e", digits = 3)
# intercepts1 = c(file_1$intercepts_error, file_2$intercepts_error, file_3$intercepts_error, file_4$intercepts_error)
df = data.frame("enzymes" = enzymes1, "slopes" = slopes1, "intercepts" = intercepts1)
# df_pt = data.frame("pt_1" = file_1$pt, "pt_2" = file_2$pt, "pt_3" = file_3$pt, "pt_4" = file_4$pt)
df_pt_error = data.frame("pt_error_1" = file_1$pt_error, "pt_error_2" = file_2$pt_error, "pt_error_3" = file_3$pt_error, "pt_error_4" = file_4$pt_error)
View(df_pt_error)
df_pt_error = t(df_pt_error)
View(df_pt_error)
df_pt_error[, 3]
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
t = 1:100
len(t)
length)t
length(t)
View(df_pt_error)
enzymes1 = c(0.1, 0.01, 0.001, 0.0001)
file_1 = lambertPt(s = s1, e = enzymes1[1], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_2 = lambertPt(s = s1, e = enzymes1[2], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_3 = lambertPt(s = s1, e = enzymes1[3], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
file_4 = lambertPt(s = s1, e = enzymes1[4], time = time1, k2 = k2, km = km, s_max = s1, pinf_ratio = pinf_ratio, interval = interval, sd = sd/5)
df_pt_error = data.frame("pt_error_1" = file_1$pt_error, "pt_error_2" = file_2$pt_error, "pt_error_3" = file_3$pt_error, "pt_error_4" = file_4$pt_error)
runApp('DePauw/Summer2019/Enzyme')
View(df_pt_error)
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
df_pt_error[0:100, 1:2]
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
nrow(df_pt_error)
t = seq(0, 500, by = 0.1)
length(t)
df_pt_error[t, ]
nrow(df_pt_error[t, 1])
nrow(df_pt_error[t, 1])
df_pt_error[t, 1]
df_pt_error[t, 1:2]
nrow(df_pt_error[t, 1:2])
nrow(df_pt_error[t, 1:3])
length(t)
nrow(df_pt_error[t, 1:4])
runApp('DePauw/Summer2019/Enzyme')
nrow(df_pt_error[, 1:2])
nrow(df_pt_error[, 1])
df
c(1:10)
df[-c(100:5001), 2]
df_pt_error[-c(100:5001), 2]
t
t_r = seq(0, len(t))
t_r = seq(0, length(t))
t_R
t_r
df_pt_error[t_r, 2:3]
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/KineticGames 7_files')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp('DePauw/Summer2019/Enzyme')
runApp()
runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
shiny::runApp('DePauw/Summer2019/Enzyme')
