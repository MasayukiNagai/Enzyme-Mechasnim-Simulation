p = 1
prob_a = 80
prob_b = 50
prob_c = 5
cycles = 5000
reps = 10
basic_mechanism(e, s, es, p, prob_a, prob_b, prob_c, cycles)
simple_plot(file)
proc.time() - ptm
ptm = proc.time()
ptm = proc.time()
#test case
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 50
s = 100
es = 1
p = 1
prob_a = 80
prob_b = 50
prob_c = 5
cycles = 5000
reps = 10
basic_mechanism2(e, s, es, p, prob_a, prob_b, prob_c, cycles)
simple_plot(file)
# rep_file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
# rep_plot(rep_file)
proc.time
#test case
ptm = proc.time()
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 50
s = 100
es = 1
p = 1
prob_a = 80
prob_b = 50
prob_c = 5
cycles = 5000
reps = 10
basic_mechanism2(e, s, es, p, prob_a, prob_b, prob_c, cycles)
simple_plot(file)
# rep_file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
# rep_plot(rep_file)
proc.time() - ptm
#test case
ptm = proc.time()
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 50
s = 100
es = 1
p = 1
prob_a = 80
prob_b = 50
prob_c = 5
cycles = 5000
reps = 10
basic_mechanism(e, s, es, p, prob_a, prob_b, prob_c, cycles)
simple_plot(file)
# rep_file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
# rep_plot(rep_file)
proc.time() - ptm
#test case
ptm = proc.time()
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 50
s = 100
es = 1
p = 1
prob_a = 80
prob_b = 50
prob_c = 5
cycles = 5000
reps = 10
file = basic_mechanism(e, s, es, p, prob_a, prob_b, prob_c, cycles)
simple_plot(file)
# rep_file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
# rep_plot(rep_file)
proc.time() - ptm
#test case
ptm = proc.time()
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 50
s = 100
es = 1
p = 1
prob_a = 80
prob_b = 50
prob_c = 5
cycles = 5000
reps = 10
file = basic_mechanism2(e, s, es, p, prob_a, prob_b, prob_c, cycles)
simple_plot(file)
# rep_file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
# rep_plot(rep_file)
proc.time() - ptm
runApp()
runApp()
runApp()
runApp('~/DePauw/Summer2019/KineticGames')
runApp()
legend_lwd = c(NA, NA, NA, NA, 2)
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
# source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 50
s = 100
es = 1
p = 1
prob_a = 80
prob_b = 50
prob_c = 5
cycles = 5000
reps = 10
file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
e_average_display = TRUE
s_average_display = TRUE
es_average_display = TRUE
p_average_display = TRUE
display = c(e_average_display, s_average_display, es_average_display, p_average_display)
file_average = c(file$e_average, file$s_average, file$es_average, file$p_average)
max(file_average[which(display == TRUE)])
max(c(file$a_average, file$b_average, file$x_average))
max(c(file$a_average, file$b_average, file$x_average)
)
which(display == TRUE)
file_average[which(display == TRUE)]
file_average[,which(display == TRUE)]
max(file$es_average)
file_average = c(max(file$e_average), max(file$s_average), max(file$es_average), max(file$p_average))
file_average[which(display == TRUE)]
runApp()
runApp()
lines(x = file$time, y = file$p_average, lty = 2, lwd = 2, col = "darkorange")
runApp()
runApp()
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
# source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 50
s = 100
es = 1
p = 1
prob_a = 80
prob_b = 50
prob_c = 5
cycles = 5000
reps = 10
file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
e = 10
s = 300
es = 0
p = 0
prob_a = 100
prob_b = 20
prob_c = 5
cycles = 50000
reps = 10
file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
y = file$es_average
m = nls(y~x*exp(-x))
m = nls(y~a*x*exp(-b*x))
set.seed(0612)
x = seq(1,50,1)
y = ((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(51,0,1)
runif(1,10,20)*x
runif(1,10,20)
runif(1,10,20)
runif(1,10,20)
runif(1,10,20)
rnorm(51,0,1)
runif(51,0,1)
m<-nls(y~a*x/(b+x))
m<-nls(y~a*x/(b+x), start = list(a = 1, b = 1))
m = nls(y ~ a*x/(b+x), start = list(a = 1, b = 1))
plot(x,t)
plot(x,y)
y = ((runif(1,10,20)*x)/(runif(1,0,10)+x))+rnorm(50,0,1)
plot(x,y)
m = nls(y ~ a*x/(b+x), start = list(a = 1, b = 1))
cor(y, predict(m))
predict(m)
y
m
lines(x, predict(m), lty = 2, col = "red", lwd = 3)
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
# source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 10
s = 300
es = 0
p = 0
prob_a = 100
prob_b = 20
prob_c = 5
cycles = 50000
reps = 10
# file = basic_mechanism(e, s, es, p, prob_a, prob_b, prob_c, cycles)
# simple_plot(file)
file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
x = max(file$time)
y = file$es_average
m = nls(y~a*x*exp(-b*x), start = list(a = 1, b = 1))
y[1:5]
y = file$es_average[2:500001]
m = nls(y~a*x*exp(-b*x), start = list(a = 1, b = 1))
length(x)
x = file$time
y = file$es_average
m = nls(y~a*x*exp(-b*x), start = list(a = 1, b = 1))
y[100:200]
y[1000:1100]
y[5000:5100]
y[3000:3100]
m = nls(y~a*x*exp(-b*x), start = list(a = 1, b = 1/1000))
m = nls(y~a*x*exp(-b*x), start = list(a = 1, b = 1/10000))
m
cor(y, predict(m))
plot(x,y)
lines(x,y, col = "red", lty = 2, lwd = 3)
plot(x,y)
lines(x, predict(m), col = "red", lty = 2, lwd = 3)
m = nls(y~a*x*exp(-b*x), start = list(a = 1/1000, b = 1/10000))
m
f(x) = x^2 + x
f = ln(x)
log(e)
log(exp(1))
m = nls(y~exp(-(log(x)-b)^2/(2*a)^2)/(a*sqrt(2)*pi*x), start = list(a = 1, b = 1))
m = nls(y~exp(-(log(x)-b)^2/(2*a)^2)/(a*sqrt(2)*pi*x), start = list(a = 10000, b = 10000))
m = nls(y~exp(-(log(x)-b)^2/(2*a)^2)/(a*sqrt(2)*pi*x), start = list(a = 1, b = 1))
exp(-(log(x))^2/(2)^2)/(sqrt(2)*pi*x)
lines(x, m2, col = "blue", lwd = 3)
m2 = exp(-(log(x)-b)^2/(2*a)^2)/(a*sqrt(2)*pi*x)
m2 = exp(-(log(x))^2/(2)^2)/(sqrt(2)*pi*x)
lines(x, m2, col = "blue", lwd = 3)
m2 = exp(-(log(x))^2/2)/(sqrt(2*pi)*x)
m[1]
m2[1]
m2[2]
m2 = exp(-(log(x/1000))^2/2)/(sqrt(2*pi)*x)
m2 = exp(-(log(x/1000))^2/2)/(sqrt(2*pi)*(x/1000)
)
m2 = exp(-(log(x/1000))^2/2)/(sqrt(2*pi)*(x/1000))
m2 = exp(-(log(x))^2/2)/(sqrt(2*pi)*x)
x2 = x/1000
m2 = exp(-(log(x2))^2/2)/(sqrt(2*pi)*x2)
m2 = exp(-(log(x))^2/2)/(sqrt(2*pi)*x2)
y[100:200]
y[200:300]
y[300:400]
y[400:500]
y[500"700"]
y[500:700]
x2 = 100*x
m2 = exp(-(log(x2))^2/2)/(sqrt(2*pi)*x2)
m2 = exp(-(log(x))^2/2)/(sqrt(2*pi)*x)
m2 = 8*m2
lines(x, m2, col = "blue", lwd = 3)
x2 = x/1000
m2 = 10*exp(-(log(x2))^2/2)/(sqrt(2*pi)*x2)
m2 = 100000*exp(-(log(x2))^2/2)/(sqrt(2*pi)*x2)
m2[1:100]
y[1:100]
m2 = 100*exp(-(log(x2))^2/2)/(sqrt(2*pi)*x2)
m2[1:100]
m2 = m2/10
m2[1:10]
m2[1:100]
lines(x, m2, col = "blue", lwd = 3)
x2 = x2/100
m2 = exp(-(log(x2))^2/2)/(sqrt(2*pi)*x2)
m2 = 10*exp(-(log(x2))^2/2)/(sqrt(2*pi)*x2)
lines(x, m2, col = "cyan", lwd = 3)
m3 = nls(m2~c*exp(-(log(x/100000)-b)^2/(2*a)^2)/(a*sqrt(2)*pi*(x/100000)), start = list(a = 1, b = 1, c = 10))
m3 = nls(m2~c*exp(-(log(x/10000)-b)^2/(2*a)^2)/(a*sqrt(2)*pi*(x/10000)), start = list(a = 1, b = 1, c = 10))
m3 = nls(m2~c*exp(-(log(x/d*10000)-b)^2/(2*a)^2)/(a*sqrt(2)*pi*(x/e*10000)), start = list(a = 1, b = 1, c = 10, d = 1, e = 1))
m3 = nls(m2~c*exp(-(log(x/(d*10000))-b)^2/(2*a)^2)/(a*sqrt(2)*pi*(x/(e*10000))), start = list(a = 1, b = 1, c = 10, d = 1, e = 1))
m3 = nls(m2~c*exp(-(log(x/(d*10000))-b)^2/(2*a)^2)/(a*sqrt(2)*pi*(x/(e*10000))), start = list(a = 1, b = 0, c = 10, d = 1, e = 1))
m2 = 10*exp(-((log(x/10000))-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*10000)))
lines(x, m2, col = "green", lwd = 3)
m2 = 14*exp(-((log(x/10000))-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*10000)))
lines(x, m2, col = "green", lwd = 3)
m2 = 14*exp(-((log(x/10000))-1000)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*10000)))
lines(x, m2, col = "green", lwd = 3)
m2 = 14*exp(-((log(x/100000))-1000)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
lines(x, m2, col = "green", lwd = 3)
m2 = 14*exp(-((log(x/100000))-1000)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
m2 = 14*exp(-((log(x/100000))-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
lines(x, m2, col = "yellow", lwd = 3)
m3 = nls(y~c*exp(-(log(x/(d*10000))-b)^2/(2*a)^2)/(a*sqrt(2)*pi*(x/(d*10000))), start = list(a = 1, b = 0, c = 14, d = 10))
m3 = nls(y~c*exp(-((log(x/(d*10000)))-b)^2/(2*a)^2)/(a*sqrt(2)*pi*(x/(d*10000))), start = list(a = 1, b = 0, c = 14, d = 10))
m2 = 14*exp(-((log(x/100000))-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
lines(x, m2, col = "violet", lwd = 3)
m2 = 14*exp(-((log(x/100000))-1000)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
lines(x, m2, col = "violet", lwd = 3)
m2 = 14*exp(-((log(x/100000))-0)^2/(2*100)^2)/(100*sqrt(2)*pi*(x/(1*100000)))
lines(x, m2, col = "violet", lwd = 3)
m2 = 14*exp(-((log(x/1000000))-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*1000000)))
lines(x, m2, col = "violet", lwd = 3)
m2 = 14*exp(-((log(x/1000000))-0)^2/(2*1)^2)/(10*sqrt(2)*pi*(x/(1*1000000)))
m2 = 14*exp(-((log(x/1000000))-0)^2/(2*10)^2)/(10*sqrt(2)*pi*(x/(1*1000000)))
lines(x, m2, col = "violet", lwd = 3)
m_best = 14*exp(-((log(x/100000))-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
lines(x, m_best, col = "orane", lwd = 3)
lines(x, m_best, col = "orange", lwd = 3)
plot(x,y)
lines(x, m_best, col = "orange", lwd = 3)
m = nls((y~c*exp(-((log(x/100000))-b)^2/(2*a)^2)/(a*sqrt(2)*pi*(x/(1*100000)))),start = list(a = 1, b = 0, c = 14))
m_best = 14*exp(-((log(x/100000))-0)^2/(2*(1^2))/(1*sqrt(2*pi)*(x/(1*100000)))
)
m_best = 14*exp(-((log(x/100000))-0)^2/(2*(1^2))/(1*sqrt(2*pi)*(x/(1*100000))))
lines(x, m_best, col = "orange", lwd = 3)
4/2*2
m_best = 14*exp(-((log(x/100000))-0)^2/(2*(sqrt(2)^2))/(sqrt(2)*sqrt(2*pi)*(x/(1*100000))))
lines(x, m_best, col = "orange", lwd = 3)
m_best = 14*exp(-((log(x/100000))-0)^2/(2*(sqrt(2)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*100000))))
lines(x, m_best, col = "orange", lwd = 3)
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*(1^2))/(1*sqrt(2)*pi*(x/(1*100000))))
lines(x, m_best_false, col = "red", lwd = 3)
m_best_false = 14*exp(-((log(x/100000))-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
lines(x, m_best_false, col = "red", lwd = 3)
m_best = 14*exp(-(log(x/100000)-0)^2/(2*(sqrt(2)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*100000))))
lines(x, m_best_false, col = "blue", lwd = 3)
m_best = 14*exp(-(log(x/100000)-0)^2/(2*(sqrt(2)^2))/2*sqrt(2*pi)*(x/(1*100000))))
m_best = 14*exp(-(log(x/100000)-0)^2/(2*(sqrt(2)^2)))/(2*sqrt(2*pi)*(x/(1*100000)))
m_best = 14*exp(-(log(x/100000)-0)^2/(2*(sqrt(2)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*100000))))
lines(x, m_best, col = "blue", lwd = 3)
m_best_false = 14*exp(-((log(x/100000))-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
lines(x, m_best, col = "blue", lwd = 3)
lines(x, m_best_false, col = "blue", lwd = 3)
lines(x, m_best_false, col = "red", lwd = 3)
4/(2*1)^2
2*(sqrt(2)^2)
m_best_false = 14*exp(-(log(x/100000)-0)^2/(sqrt(2)*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
lines(x, m_best_false, col = "green", lwd = 3)
m_best_false = 14*exp(-(log(x/100000)-0)^2/(sqrt(2)*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(sqrt(2)*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*(sqrt(2)^2))/(1*sqrt(2)*pi*(x/(1*100000)))
)
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*1)^2)/(1*sqrt(2)*pi*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*sqrt(2)^2))/(1*sqrt(2)*pi*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*sqrt(2)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*100000)))
lines(x, m_best_false, col = "green")
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*sqrt(2)^2))/(2*sqrt(2*pi)*(x/(1*100000)))
lines(x, m_best_false, col = "darkgreen", lwd = 3)
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*sqrt(2)^2))/(1.*sqrt(2*pi)*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*sqrt(2)^2))/(1*sqrt(2*pi)*(x/(1*100000)))
lines(x, m_best_false, col = "darkgreen", lwd = 3)
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*sqrt(2)^2))/(1.5*sqrt(2*pi)*(x/(1*100000)))
lines(x, m_best_false, col = "green", lwd = 3)
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*sqrt(2)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*100000)))
m_best_false = 14*exp(-(log(x/100000)-0)^2/(2*sqrt(4)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*100000)))
lines(x, m_best_false, col = "green", lwd = 3)
m_best_false = 14*exp(-(log(x/1000000)-0)^2/(2*sqrt(4)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*1000000)))
lines(x, m_best_false, col = "green", lwd = 3)
m_best_false = 5*exp(-(log(x/1000000)-0)^2/(2*sqrt(4)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*1000000)))
lines(x, m_best_false, col = "violet", lwd = 3)
m_best_false = 5*exp(-(log(x/1000000)-0)^2/(2*sqrt(5)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*1000000)))
lines(x, m_best_false, col = "violet", lwd = 3)
m_best_false = 5*exp(-(log(x/1000000)-0)^2/(2*sqrt(3)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*1000000)))
lines(x, m_best_false, col = "violet", lwd = 3)
m_best_false = 5*exp(-(log(x/1000000)-100)^2/(2*sqrt(5)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*1000000)))
lines(x, m_best_false, col = "purple", lwd = 3)
m_best_false = 5*exp(-(log(x/1000000)-10)^2/(2*sqrt(5)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*1000000)))
lines(x, m_best_false, col = "purple", lwd = 3)
y = nls(y~a*exp(-(log(x/1000000))^2/(2*b^2))/(c*sqrt(2*pi)*(x/(1*1000000))),start = list(a = 5, b = 2, c = sqrt(pi))
)
cor(y, 5*exp(-(log(x/1000000)-0)^2/(2*sqrt(4)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*1000000)))
)
cor(y, 5*exp(-(log(x/1000000)-0)^2/(2*sqrt(4)^2))/(sqrt(pi)*sqrt(2*pi)*(x/(1*1000000))))
predict(m)
m_best_false[0] = 0
m_best_false[1] = 0
cor(y, m_best_false)
cor(y[10000:50000],m2[10000:50000])
runApp()
#test case
ptm = proc.time()
setwd("~/DePauw/Summer2019/Enzyme")
source("basic_mechanism.R")
# source("basic_mechanism2.R")
source("simple_plot.R")
source("repeat_simulation.R")
source("rep_plot.R")
e = 10
s = 300
es = 0
p = 0
prob_a = 100
prob_b = 20
prob_c = 5
cycles = 50000
reps = 10
# file = basic_mechanism(e, s, es, p, prob_a, prob_b, prob_c, cycles)
# simple_plot(file)
file = repeat_simulation(reps, e, s, es, p, prob_a, prob_b, prob_c, cycles)
rep_plot(rep_file)
proc.time() - ptm
rep_plot(file)
y = file$es_average
linear = lm(y~a*x+b, start = list(a = 10^(-10000), b = file$e_average[[1]]))
x = file$time
linear = lm(y~a*x+b, start = list(a = 10^(-10000), b = file$e_average[[1]]))
file$e_average[1]
linear = lm(y~a*x+b, start = list(a = 10^(-10000), b = file$e_average[1))
linear = lm(y~a*x+b, start = list(a = 10^(-10000), b = file$e_average[1])
)
file$e_average[1]
linear = lm(y~a*x+b, start = list(a = 10^(-10000), b = file$e_average[1]))
linear = lm(file$es_average~file$time)
summary(linear)
View(linear)
slope = linear$coefficients[2]
y-int = linear$coefficients[1]
y_int = linear$coefficients[1]
lines(y = slope * x + y_int, col = "red", lwd = 3, lty = 3)
abline(y_int, slope, col = "red", lwd = 3)
rep_plot(file, s_average_display = FALSE, p_average_display = FALSE)
abline(y_int, slope, col = "red", lwd = 3)
k_-1 = 2
e = 20
s_axis = 1000
k1 = 199
k_1 = 20
k2 = 5
s = seq(0:s_axis)
es = 0
p = 0
km = (k_1 + k2)/k1
v_init = (k2 * e * s)/(km + s)
plot(s,v_init)
lines(s, v_init)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file = simulateMM()
source("simulate.R")
source("simulateMM.R")
file = simulateMM()
plotMM(file)
source("plotMM.R")
plotMM(file)
source("simulateMM.R")
file = simulateMM()
plotMM(file)
source("simulateMM.R")
file = simulateMM()
plotMM(file)
file$v_init
file$s
source("simulateMM.R")
file = simulateMM()
plotMM(file)
file$v_init
source("simulateMM.R")
file = simulateMM()
plotMM(file)
source("simulateMM.R")
file = simulateMM()
plotMM(file)
source("simulateMM.R")
file = simulateMM()
plotMM(file)
source("simulateMM.R")
file = simulateMM()
plotMM(file)
source("simulateMM.R")
plotMM(file)
file = simulateMM()
plotMM(file)
runApp()
runApp()
