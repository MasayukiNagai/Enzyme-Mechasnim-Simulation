# abline(exp5$y_intercept, exp5$slope, col = "cyan")
# abline(exp6$y_intercept, exp6$slope, col = "cyan")
# slopes = c(exp1$slope,exp2$slope,exp3$slope,exp4$slope,exp5$slope,exp6$slope)
# substrates = c(exp1$s, exp2$s,exp3$s,exp4$s,exp5$s,exp6$s)
# solvents = c(exp1$solvent, exp2$solvent,exp3$solvent,exp4$solvent,exp5$solvent,exp6$solvent)
# cons = substrates/(substrates + solvents)
#
# plot(x = substrates, y = slopes)
exp1 = lambertMM(s = 5, e = 0.02)
exp2 = lambertMM(s = 4, e = 0.02)
exp3 = lambertMM(s = 3, e = 0.02)
exp4 = lambertMM(s = 2, e = 0.02)
exp5 = lambertMM(s = 1, e = 0.02)
exp6 = lambertMM(s = 0, e = 0.02)
t = exp1$t
plot(x = t, y = exp1$pt, type = "l", lwd = 2, col = "blue")
lines(x = t, y = exp2$pt, type = "l", lwd = 2, col = "blue")
lines(x = t, y = exp3$pt, type = "l", lwd = 2, col = "blue")
lines(x = t, y = exp4$pt, type = "l", lwd = 2, col = "blue")
lines(x = t, y = exp5$pt, type = "l", lwd = 2, col = "blue")
lines(x = t, y = exp6$pt, type = "l", lwd = 2, col = "blue")
lines(x = t, y = exp1$pt_error, type = "p")
lines(x = t, y = exp2$pt_error, type = "p")
lines(x = t, y = exp3$pt_error, type = "p")
lines(x = t, y = exp4$pt_error, type = "p")
lines(x = t, y = exp5$pt_error, type = "p")
lines(x = t, y = exp6$pt_error, type = "p")
abline(exp1$y_intercept, exp1$slope, col = "cyan")
abline(exp2$y_intercept, exp2$slope, col = "cyan")
abline(exp3$y_intercept, exp3$slope, col = "cyan")
abline(exp4$y_intercept, exp4$slope, col = "cyan")
abline(exp5$y_intercept, exp5$slope, col = "cyan")
abline(exp6$y_intercept, exp6$slope, col = "cyan")
abline(exp1$y_intercept_error, exp1$slope_error, col = "orange")
abline(exp2$y_intercept_error, exp2$slope_error, col = "orange")
abline(exp3$y_intercept_error, exp3$slope_error, col = "orange")
abline(exp4$y_intercept_error, exp4$slope_error, col = "orange")
abline(exp5$y_intercept_error, exp5$slope_error, col = "orange")
abline(exp6$y_intercept_error, exp6$slope_error, col = "orange")
slopes = c(exp1$slope,exp2$slope,exp3$slope,exp4$slope,exp5$slope,exp6$slope)
slopes_error = c(exp1$slope_error,exp2$slope_error,exp3$slope_error,exp4$slope_error,exp5$slope_error,exp6$slope_error)
substrates = c(exp1$s, exp2$s,exp3$s,exp4$s,exp5$s,exp6$s)
plot(x = substrates, y = slopes, col = "orange")
lines(x = substrates, y = slopes_error, type = "p", col = "cyan")
df = data.frame(substrates, slopes, slopes_error)
for(i in 1:len(df.index)){
s_new = c(df$substrates, as.numeric(input$s_ex))
}
y = slopes
s = substrates
v_max = exp1$vapp
km = exp1$kmapp
curve(v_max * x/(km + x), 0, exp1$s, add = TRUE, type = "l", lwd = 2, lty = 2, col = "red")
# nls(slopes~v_max * s/(km + s))
s = 1:!0
s = 1:10
t = 1
t = 10:20
y = st
y = s * t
t = 11:20
y = s * t
View(df)
file = df
len(file)
length(file)
length(file$substrates)
file$substrates[2]
source("lambertMM.R")
lambertMM(file = file)
lambertMM(file = df)
pt = rep(length(file$substrates), character(1 + 20))
time = 20
pt = rep(character(1 + time),length(file$substrates))
pt = rep(list(character(time + 1)), length(file$substrates))
pt[i]
pt[1]
t = seq(0, time, 0.1)
length(t)
pt = rep(list(character(length(t))), length(file$substrates))
2t
2 * t
pt[i] = 2 * t
pt[1] = 2 * t
length(pt[1])
length(pt[[1]])
length(pt[2])
length(pt[[2]])
pt = rep(list(character(length(t))), length(file$substrates))
pt[[1]] = 2 * t
source("lambertMM.R")
lambertMM(file = df)
pt[1][0:10]
pt[[1]]
pt[[1]][0:10]
source("lambertMM.R")
lambertMM(file = df)
source("lambertMM.R")
lambertMM(file = df)
out = lambertMM()
out = lambertMM(df)
View(out)
source("lambertMM.R")
out = lambertMM(df)
View(out)
View(out)
source("repeat_game.R")
source("rep_plot.R")
source("kinetics_reactions/monomolecular.R")
source("kinetics_reactions/bimolecular.R")
source("kinetics_reactions/catalytic.R")
source("kinetics_reactions/autocatalytic.R")
source("kinetics_reactions/consecutive.R")
source("kinetics_reactions/equilibrium.R")
source("multiple_repeat_game.R")
source("multiple_rep_plot.R")
source("create_caption.R")
setwd("~/DePauw/Summer2019/KineticGames")
source("repeat_game.R")
source("rep_plot.R")
source("kinetics_reactions/monomolecular.R")
source("kinetics_reactions/bimolecular.R")
source("kinetics_reactions/catalytic.R")
source("kinetics_reactions/autocatalytic.R")
source("kinetics_reactions/consecutive.R")
source("kinetics_reactions/equilibrium.R")
source("multiple_repeat_game.R")
source("multiple_rep_plot.R")
source("create_caption.R")
trial = repeat_game()
View(trial)
setwd("~/DePauw/Summer2019/Enzyme")
matplot(x = out$t, y = out$pt_error)
out[["pt_error"]]
out$pt_error
trial$a_reps
empdf = data.frame[10,0]
dd = as.data.frame(matrix(unlist(out$pt), nrow = length(unlist(out$pt[1]))))
View(dd)
source("plot_lambert.R")
plot_lambert(out)
source("plot_lambert.R")
plot_lambert(out)
source("plot_lambert.R")
plot_lambert(out)
source("plot_lambert.R")
plot_lambert(out)
View(file)
file = put
file = out
s_max = 20
pinf = file$pinf_ration * s_max
pt_max = pinf - file$kmapp * lambertW({(pinf/file$kmapp) * exp((pinf - file$vapp * file$time)/file$kmapp)})
ymax = pt_max
s_max = 20
pinf = file$pinf_ration * s_max
pt_max = pinf - file$kmapp * lambertW({(pinf/file$kmapp) * exp((pinf - file$vapp * file$time)/file$kmapp)})
ymax = pt_max
s_max = 20
pinf = file$pinf_ratio * s_max
pt_max = pinf - file$kmapp * lambertW({(pinf/file$kmapp) * exp((pinf - file$vapp * file$time)/file$kmapp)})
ymax = pt_max
file = lambertMM(df)
s_max = 20
pinf = file$pinf_ratio * s_max
pt_max = pinf - file$kmapp * lambertW({(pinf/file$kmapp) * exp((pinf - file$vapp * file$time)/file$kmapp)})
ymax = pt_max
out  = file
View(file)
source("lambertMM.R")
file = lambertMM(df)
View(df)
source("lambertMM.R")
file = lambertMM(df)
s_max = 20
pinf = file$pinf_ratio * s_max
pt_max = pinf - file$kmapp * lambertW({(pinf/file$kmapp) * exp((pinf - file$vapp * file$time)/file$kmapp)})
ymax = pt_max
source("plot_lambert.R")
plot_lambert(file)
source("plot_lambert.R")
plot_lambert(file)
source("plot_lambert.R")
plot_lambert(file)
source("plot_lambert.R")
plot_lambert(file)
source("plot_lambert.R")
source("lambertMM.R")
file = lambertMM(df)
plot_lambert(file = )
plot_lambert(file)
source("plot_lambert.R")
plot_lambert(file)
source("plot_lambert.R")
source("plot_lambert.R")
plot_lambert(file)
source("lambertMM.R")
file = lambertMM(df)
source("lambertMM.R")
file = lambertMM(df)
source("lambertMM.R")
file = lambertMM(df)
source("lambertMM.R")
file = lambertMM(df)
source("lambertMM.R")
file = lambertMM(df)
plot_lambert(file)
source("plot_lambert.R")
plot_lambert(file)
slopescheck = file$slopes_error
source("lambertMM.R")
file = lambertMM(df)
slopescheck = as.numeric(character(!0))
slopescheck = as.numeric(character(10))
source("lambertMM.R")
file = lambertMM(df)
source("lambertMM.R")
file = lambertMM(df)
source("plot_lambert.R")
plot_lambert(file)
plot_lambert(file)
source("plot_lambert.R")
plot_lambert(file)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
View(file)
file = lambertMM(df)
View(file)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
islopes = file$slopes_error
source("lambertMM.R")
file = lambertMM(df)
islopes = file$slopes_error
source("lambertMM.R")
source("plot_lambertMM.R")
file = lambertMM(df)
source("plot_lambert.R")
plot_lambert(file)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
warning()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
file = lambertMM()
substrates = character()
df = data.frame("substrates" = substrates)
file = lambertMM(file = df)
View(file)
is.null(file$pt_error)
length(file$pt)
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
else{
plot(x = -100, y = -100, type = "p",
xlim = c(0, file$time), ylim = c(0, ymax), xlab = "Time (s)", ylab = "[P] (M)")
# mtext("Time (s)", side = 1, line = 2, cex = 1.5)
# mtext("[P] (M)", side = 2, line = 2, cex = 1.5)
# mtext(main_title, side = 3, line = 1.5, cex = 2.5)
grid(col = "black")
if(display_theoretical_values){
matlines(x = file$t, y = file$pt, type = "l", lty = 1, lwd = 2, col = "darkgreen")
}
matlines(x = file$t, y = file$pt_error, type = "p", pch = 1, col = "black")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = "blue")
}
runApp()
runApp()
runApp()
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = color)
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1)
substrates = (1, 2, 3, 4, 5, 9, 0.5)
substrates = c(1, 2, 3, 4, 5, 9, 0.5)
df = data.frame("substrates" = substrates)
file = lambertMM(file = df)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = "blue")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = "blue")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = "blue")
color = rgb(1, 0.5, 0,8)
color = rgb(1, 0.5, 0.8)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = color)
color = c("black", "black", "red", "blue", "green", "yellow", "red")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = color)
color = rgb(1 - file$slopes_error/file$vapp, 0, 0)
color = rgb(1 - file$slopes_error/file$vapp, 1 - file$slopes_error/file$vapp, 1)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = color)
file$slopes_error/file$vapp
color = rgb(1 - file$slopes_error/file$vapp, 1 - file$slopes_error/file$vapp, 0.5)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = color)
color = rgb(1 - file$slopes_error/file$vapp, 1 - file$slopes_error/file$vapp, 0.7)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = color)
runApp()
color = rgb(1 - 2 * file$slopes_error/file$vapp, 1 - 2 * file$slopes_error/file$vapp, 1)
color = rgb((1 - 2 * file$slopes_error/file$vapp) * 204/255, (1 - 2 * file$slopes_error/file$vapp) * 204/255, 1)
}
else{
color = rgb(0, 0, 1 - (file$slopes_error/file$vapp) * 155/255)
}
if(2 * file$slopes_error < file$vap){
color = rgb((1 - 2 * file$slopes_error/file$vapp) * 204/255, (1 - 2 * file$slopes_error/file$vapp) * 204/255, 1)
}
else{
color = rgb(0, 0, 1 - (file$slopes_error/file$vapp) * 155/255)
}
if(2 * file$slopes_error < file$vapp){
color = rgb((1 - 2 * file$slopes_error/file$vapp) * 204/255, (1 - 2 * file$slopes_error/file$vapp) * 204/255, 1)
}
else{
color = rgb(0, 0, 1 - (file$slopes_error/file$vapp) * 155/255)
}
file$slopes_error/file$vapp
source("chnage_color.R")
source("change_color.R")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color(i)))
y1 <- sapply(1:10, function(k) sample(letters, k, replace = TRUE), simplify = TRUE)
y2 <- sapply(1:10, function(k) sample(letters, k, replace = TRUE), simplify = FALSE)
y1 <- sapply(1:10, sample(letters, k, replace = TRUE), simplify = FALSE)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color()))
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 1, col = color)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color))
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
ratio = file$slopes_error/file$vapp
ration
ration
ratio
change_color = function(0.4558196){
if(i < 1/2){
out = rgb((1 - 2 * file$slopes_error/file$vapp) * 204/255, (1 - 2 * file$slopes_error/file$vapp) * 204/255, 1)
}
else{
out = rgb(0, 0, 1 - (file$slopes_error/file$vapp) * 155/255)
}
out
}
change_color(0.4558196)
source("plot_lambert.R")
source("change_color.R")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color))
matlines(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color))
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("change_color.R")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color))
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
source("change_color.R")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color))
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
source("change_color.R")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color))
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
runApp()
source("change_color.R")
xval = matrix(data = c(0, file$time), ncol = 1)
yval1 = file$intercepts_error + file$slopes_error * 0
yval2 = file$intercepts_error + file$slopes_error * file$time
yvalues = rbind(yval1, yval2)
color = unlist(lapply(file$slopes_error/file$vapp, change_color))
matplot(x = xval, y = yvalues, type = "l", lty = 2, lwd = 2, col = color)
runApp()
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
runApp()
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
runApp()
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
df = data.frame
substrates = list(0.01, 0.02, 0.04, 0.08, 0.15, 0.60, 2.0)
df = data.frame("substrates" = substrates)
file = lambertMM(df)
View(file)
substrates = c(0.01, 0.02, 0.04, 0.08, 0.15, 0.60, 2.0)
df = data.frame("substrates" = substrates)
file = lambertMM(df)
View(file)
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
source("lambertMM.R")
file = lambertMM(df)
View(file)
source('~/DePauw/Summer2019/Enzyme/lambertMM.R')
runApp()
